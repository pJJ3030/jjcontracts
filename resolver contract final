pragma solidity 0.8.6;

interface IRealitio {
  function isFinalized(bytes32 question_id) external view returns (bool);
  function getFinalAnswer(bytes32 question_id) external view returns (bytes32);    
}

interface IConditionalTokens {
  function reportPayouts(bytes32 questionId, uint[] calldata payouts) external;
}

contract ConditionResolverUsingReality {
   address private realityContractAddress = 0x5b7dD1E86623548AF054A4985F7fc8Ccbb554E2c;
   address private conditionalTokenAddress = 0xC59b0e4De5F1248C1140964E0fF287B192407E0C;
   
   bytes32 resolvedToOpt1 = 0x0000000000000000000000000000000000000000000000000000000000000000;
   bytes32 resolvedToOpt2 = 0x0000000000000000000000000000000000000000000000000000000000000001;
   bytes32 resolvedToInvalid = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
   
   event Resolved(address indexed _resolver, bytes32 indexed _question_id, uint256[] _result);

   function getGnonisAnswerForRealityFinalAnswer(bytes32 final_answer) view internal returns (uint256 [] memory){
        uint256[] memory dataToBeReturned = new uint256[](2);
        if(final_answer==resolvedToInvalid){
            dataToBeReturned[0] = 1;
            dataToBeReturned[1] = 1;
            return dataToBeReturned;
        }
        
        if(final_answer==resolvedToOpt1){
            dataToBeReturned[0] = 1;
            dataToBeReturned[1] = 0;
            return dataToBeReturned;
        }
        
        if(final_answer==resolvedToOpt2){
            dataToBeReturned[0] = 0;
            dataToBeReturned[1] = 1;
            return dataToBeReturned;
        }
   }
   
   function resolveMarket(bytes32 question_id) external{
       bool isFinalized = IRealitio(realityContractAddress).isFinalized(question_id);
       if(isFinalized==true){
          bytes32 final_answer = IRealitio(realityContractAddress).getFinalAnswer(question_id); 
          uint256[] memory resolutionResult = new uint256[](2);
          resolutionResult = getGnonisAnswerForRealityFinalAnswer(final_answer);

          if(resolutionResult.length > 0){
            IConditionalTokens(conditionalTokenAddress).reportPayouts(question_id, resolutionResult);
            emit Resolved(msg.sender, question_id, resolutionResult);
          }

       }
        
   }
   
}
